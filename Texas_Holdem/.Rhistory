}, deleteFile = T)
})
runApp()
runApp()
runApp()
i.hand <- function(hand){
lapply(1:5,
function(x)
{
output[[paste("option.img",x,sep="")]] <- renderImage({
i.card(hand[[x]])
}, deleteFile = T)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(1,2)
a[2]
a[3]
a[4]
runApp()
runApp()
option
runApp()
runApp()
player.hand
player.hand <- player.hand[[-(option)]]
option
player.hand <- player.hand[[-option]]
player.hand <- player.hand[[-1]]
player.hand <- player.hand[[-1]][,]
player.hand[1]
runApp()
desk
a <- a
a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
player.hand
player.hand[option]
player.hand[-option]
player.hand <- player.hand[-option]
runApp()
runApp()
desk
player.hand
runApp()
runApp()
runApp()
vec <- seq(from = 2, to = 12, by = 2)
vec[seq(from = 2, to = length(vec), by = 2)]
vec[-1]
vec[- c(1,3)]
vec[1:length(vec)-1]
revVec <- rev(vec)
vec[rep(1,5)]
unifMat <- matrix(runif(4*3), nrow = 4, ncol = 3)
unifMat
for(i in 1:length(unifMat)){
if(i%%2==0){unifMat[i] <- unifMat[i]*2
}else{unifMat[i] <- unifMat[i]/2}
}
matVec <- as.matrix(vec)
dim(matVec)
unifMat[1,,drop=F]
unifMat[1,,drop=T]
unifMat[1,]
?[]
?[,,]
?[,,drop]
?drop
vec[rep(1,5)]
NULL
NULL
NA
nA
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
actionButton("update", "Update other buttons"),
br(),
actionButton("goButton", "Go"),
br(),
actionButton("goButton2", "Go 2", icon = icon("area-chart")),
br(),
actionButton("goButton3", "Go 3")
)
server <- function(input, output, session) {
observe({
req(input$update)
# Updates goButton's label and icon
updateActionButton(session, "goButton",
label = "New label",
icon = icon("calendar"))
# Leaves goButton2's label unchaged and
# removes its icon
updateActionButton(session, "goButton2",
icon = character(0))
# Leaves goButton3's icon, if it exists,
# unchaged and changes its label
updateActionButton(session, "goButton3",
label = "New label 3")
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sidebarPanel(
selectInput(
"plotType", "Plot Type",
c(Scatter = "scatter",
Histogram = "hist")),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.plotType == 'hist'",
selectInput(
"breaks", "Breaks",
c("Sturges",
"Scott",
"Freedman-Diaconis",
"[Custom]" = "custom")),
# Only show this panel if Custom is selected
conditionalPanel(
condition = "input.breaks == 'custom'",
sliderInput("breakCount", "Break Count", min=1, max=1000, value=10)
)
)
)
runApp()
runApp()
View(ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
player.score
runApp()
runApp()
runApp()
runApp()
deck
length(deck)
runApp()
runApp()
card.max
a <- c(1,2,3)
a[1:4]
runApp()
runApp()
ai.hand
player.hand
runApp()
desk
desk.size
desk[desk.size]
ai.hand
ai.hand
hand <- ai.hand
desk
hand
check <- function(hand, top = desk[desk.size]){
index <- c()
t.num <- strsplit(top, " ")[[1]][2]
t.suit <- strsplit(top, " ")[[1]][1]
if (length(hand) != 0){
for (i in 1:length(hand)){
h.num <- strsplit(hand[i], " ")[[1]][2]
h.suit <- strsplit(hand[i], " ")[[1]][1]
if (h.num == t.num || h.suit == t.suit){
index <- c(index, i)
}
}
return(index)
}else{
return(NA)
}
}
check(ai.hand)
ai.hand
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ai.hand
desk
check(ai.hand)
desk <- desk[-desk.size]
desk
desk <- "diamonds 11"
check(ai.hand)
desk.size = 1
check(ai.hand)
ai.hand[check(ai.hand)]
strsplit(ai.hand, " ")
strsplit(ai.hand, " ")[2]
strsplit(ai.hand, " ")[[]][2]
strsplit(ai.hand, " ")[[1:5]][2]
gsub("[[:digit:]]","",ai.hand)
gsub("[[\\d]]","",ai.hand)
gsub("\\d","",ai.hand)
gsub("\\D","",ai.hand)
ai.numb == "11"
ai.numb <- gsub("\\D","",ai.hand)
ai.numb == "11"
ai.numb
as.numeric(ai.numb)
max(as.numeric(ai.numb))
min(as.numeric(ai.numb))
ai.numb <- as.numeric(gsub("\\D","",ai.hand))
ai.index <- check(ai.hand)
ai.numb <- as.numeric(gsub("\\D","",ai.hand))
ai.index
desk
ai.hand
ai.numb <- as.numeric(gsub("\\D","",ai.hand))
ai.score <<- ai.score + min(ai.numb)
ai.hand <<- ai.hand[which(ai.numb == min(ai.numb))]
ai.score
ai.hand
ai.hand <<- ai.hand[- which(ai.numb == min(ai.numb))]
ai.hand
ai.index <- check(ai.hand)
runApp()
ai.hand
desk
ai.index <- check(ai.hand)
ai.numb <- as.numeric(gsub("\\D","",ai.hand))
ai.index
ai.numb
ai.score <<- ai.score + min(ai.numb)
ai.score
ai.hand <<- ai.hand[- (which(ai.numb == min(ai.numb)))]
ai.hand
desk <<- c()
desk
desk == NULL
(desk)
if(desk)
{print("a")}
player.hand
player.index <- check(player.hand)
desk
a <- c(1,2,3,4)
b <- 1
a == b
if(a == b)
{print(a)}
mean(a==b)
b
b <- 6
mean(a==b)
runApp()
is.na(player.hand)
player.hand
runApp()
runApp()
runApp()
runApp()
player.index <- check(player.hand)
player.index
runApp()
runApp()
runApp()
runApp()
runApp()
player.hand
option
# play wild card
player.hand[option]
runApp()
# Wild Cards
wild.option <- function(card){
suit <- c("clubs", "hearts", "spades", "diamonds")
output[["option.img1"]] <- renderImage({
i.card(card)
}, deleteFile = T)
lapply(2:5,
function(x)
{
output[[paste("option.img",x,sep="")]] <- renderImage({
i.card(paste(suit[x-1], 11), type = "W")
}, deleteFile = T)
})
}
runApp()
runApp()
# play wild card
player.numb <- as.numeric(gsub("\\D","",player.hand[option]))
player.numb
if (player.numb == 11 || player.numb > 13){
wild.option(player.hand[option])
}
runApp()
# play wild card
player.numb <- as.numeric(gsub("\\D","",player.hand[option]))
player.numb
runApp()
# play wild card
player.numb <- as.numeric(gsub("\\D","",player.hand[option]))
player.numb
if (player.numb == 11 || player.numb > 13){
wild.option(player.hand[option])
}
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
ui <- fluidPage(
actionButton("update", "Update other buttons"),
br(),
actionButton("goButton", "Go"),
br(),
actionButton("goButton2", "Go 2", icon = icon("area-chart")),
br(),
actionButton("goButton3", "Go 3")
)
server <- function(input, output, session) {
observe({
req(input$update)
# Updates goButton's label and icon
updateActionButton(session, "goButton",
label = "New label",
icon = icon("calendar"))
# Leaves goButton2's label unchaged and
# removes its icon
updateActionButton(session, "goButton2",
icon = character(0))
# Leaves goButton3's icon, if it exists,
# unchaged and changes its label
updateActionButton(session, "goButton3",
label = "New label 3")
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
actionButton("update", "Update other buttons"),
br(),
actionButton("goButton", "Go"),
br(),
actionButton("goButton2", "Go 2", icon = icon("area-chart")),
br(),
actionButton("goButton3", "Go 3")
)
server <- function(input, output, session) {
observe({
req(input$update)
# Updates goButton's label and icon
updateActionButton(session, "goButton",
label = "New label",
icon = icon("calendar"))
# Leaves goButton2's label unchaged and
# removes its icon
updateActionButton(session, "goButton2",
icon = character(0))
# Leaves goButton3's icon, if it exists,
# unchaged and changes its label
updateActionButton(session, "goButton3",
label = "New label 3")
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
player.hand
option
desk
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
player.hand
deck
desk
runApp()
?req()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
desk
player.hand
runApp()
runApp()
runApp()
player.hand
desk
player.hand
runApp()
runApp()
deck <<- card()
# Building a deck
card <- function(shuffle=T){
card.wild <<- c("joker_a 14", "joker_b 15", "clubs 11", "hearts 11", "spades 11", "diamonds 11")
cards <- c("joker_a 14", "joker_b 15")
for (i in c("clubs", "hearts", "spades", "diamonds")){
for (j in 1:13){
cards <- append(cards,paste(i,j))
}
}
if(shuffle) sample(cards)
else cards
}
deck <<- card()
deck
deck <<- card()
deck
deck <<- card()
deck
# deck <<- card()
test.deck <<-deck
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v.play
test.deck
print(test.deck)
runApp()
req(v.play > 0)
observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
player.hand
desk
deck
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
wild.play
runApp()
runApp()
palyer.hand
player.hand
desk
wild.play
shiny::runApp()
library(tidyverse)
shiny::runApp()
