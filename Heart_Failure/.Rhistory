runApp()
runApp()
# prepare data for scatter plot
data_numeric_scatter <- factorData %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# scatter plot
PairPlot(data_numeric_scatter,
colnames(data_numeric_scatter)[1:7],
title="Title",
group_var = "survive",
alpha=0.5，
palette="Set1")
# prepare data for scatter plot
data_numeric_scatter <- factorData %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# scatter plot
PairPlot(data_numeric_scatter,
colnames(data_numeric_scatter),
title="Title",
group_var = "survive",
alpha=0.5，
palette="Set1")
runApp()
runApp()
runApp()
# prepare data for scatter plot
data_numeric_scatter <- factorData %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# scatter plot
PairPlot(data_numeric_scatter,
colnames(data_numeric_scatter)[1:7],
title="Title",
group_var = "survive",
alpha=0.5，
palette="Set1")
# prepare data for scatter plot
data_numeric_scatter <- Data %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# prepare data for scatter plot
data_numeric_scatter <- data %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# scatter plot
PairPlot(data_numeric_scatter,
colnames(data_numeric_scatter)[1:7],
title="Title",
group_var = "survive",
alpha=0.5，
palette="Set1")
runApp()
runApp()
# prepare data for scatter plot
data_numeric_scatter <- factorData %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
# scatter plot
PairPlot(data_numeric_scatter,
colnames(data_numeric_scatter)[1:7],
title="Title",
group_var = "survive",
alpha=0.5，
palette="Set1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
# prepare data for scatter plot
data_numeric_scatter <- data %>% select(age,CPK,EF,platelets,creatinine,sodium,time,survive)
data_numeric_scatter$death <- as.factor(1-data_numeric_scatter$survive)
# define color
pl_colorscale = list(c(0.0, '#119dff'),
c(0.5, '#119dff'),
c(0.5, '#ef553b'),
c(1, '#ef553b'))
# define axis
axis = list(showline=FALSE,
zeroline=FALSE,
gridcolor='#ffff',
ticklen=4,
titlefont=list(size=13))
# points in scatterplot Matrix
fig <- data_numeric_scatter %>%
plot_ly()
fig <- fig %>%
add_trace(
type = 'splom',
dimensions = list(
list(label='age', values=~age),
list(label='CPK', values=~CPK),
list(label='EF', values=~EF),
list(label='platelets', values=~platelets),
list(label='creatinine', values=~creatinine),
list(label='sodium', values=~sodium),
list(label='time', values=~time)
),
text=~factor(death, labels=c("survive","dead")),
diagonal=list(visible=F),
marker = list(
color = ~death,
colorscale = pl_colorscale,
size = 5,
line = list(
width = 1,
color = 'rgb(230,230,230)'
)
)
)
# backgroup of scatterplot Matrix
fig <- fig %>%
layout(
title = "Scatterplot Matrix",
hovermode='closest',
dragmode = 'select',
plot_bgcolor='rgba(240,240,240, 0.95)',
xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4, titlefont=list(size=13)),
yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4, titlefont=list(size=13)),
xaxis2=axis,
xaxis3=axis,
xaxis4=axis,
xaxis5=axis,
xaxis6=axis,
xaxis7=axis,
yaxis2=axis,
yaxis3=axis,
yaxis4=axis,
yaxis5=axis,
yaxis6=axis,
yaxis7=axis
)%>% style(showupperhalf = F)
# show the figure
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# prepare data for pca
data_numeric_pc  <- data %>% select(age,CPK,EF,platelets,creatinine,sodium,time)
# PCA
pc.out <- prcomp(data_numeric_pc,scale = T)
# referrence
summary(pc.out)
a <- summary(pc.out)
data.frame9a
data.frame(a)
a
as.data.frame.table(a)
as.data.frame(a)
as.data.frame.matrix(a)
runApp()
runApp()
?sliderInput
runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
renderRglwidget
?renderRglwidget
install.packages("rgl")
library(rgl)
shiny::runApp()
install.packages("pca3d")
runApp()
runApp()
runApp()
runApp()
runApp()
a <- "1,2"
a
noquote(a)
c(noquote(a))
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(WVPlots)
library(pca3d)
library(tree)
# rotation
round(pc.out$rotation[,1:3],3)
# rotation
round(pc.out$rotation[,1:3],1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
a
a <- "1,2"
a
unquote(a)
a
a
noquote(a)
c(noquoute)
c(noquote(a))
split(a)
split(a,f=",")
split(noquote(a),f=",")
a <- noquote(a)
a
"print('niuniu')"
a <- "print('niuniu')"
a
eval(parse(test=a))
eval(parse(text=a))
a
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(WVPlots)
library(pca3d)
library(tree)
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(WVPlots)
library(pca3d)
library(tree)
# read in raw data
data <- read_csv("heart_failure_clinical_records_dataset.csv") %>%
# change the variable names
rename( "CPK"=creatinine_phosphokinase,
"EF" = ejection_fraction,
"HT" = high_blood_pressure,
"creatinine" = serum_creatinine,
"sodium" = serum_sodium,
"death" = DEATH_EVENT) %>%
# create a new variable called survive
mutate(survive = 1-death) %>% select (-"death")
# create a new data set which is similar with data
factorData <- data
# change the boolean variable into categorical data
factorData$anaemia <- as.factor(factorData$anaemia)
factorData$diabetes <- as.factor(factorData$diabetes)
factorData$HT <- as.factor(factorData$HT)
factorData$sex <- as.factor(factorData$sex)
factorData$smoking <- as.factor(factorData$smoking)
factorData$survive <- as.factor(factorData$survive)
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
# giveing the referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2)
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal)
text(pruneFitFinal, pretty = 0, cex = 0.6)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
?numericInput
runApp()
runApp()
n_list[1]
c_list <- list("anaemia","diabetes","HT","sex","smoking")
n_list <- list("age","CPK","EF","platelets","creatinine","sodium","time")
n_list
n_list[1]
runApp()
runApp()
runApp()
a <- list(1,2,3)
a
b <- list(2,4,5)
a %in% b
a <- list(1,3)
a %in% b
a %in% b >0
|(a %in% b )
||(a %in% b )
&(a %in% b )
a
b
2 %in% b
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_factor_tree <- factorData %>% select(time, creatinine,survive)
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2, age = 2),type="class")
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
# giving the referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2)
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal)
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2, age = 2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2, age = 3),type="class")
predClass
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2, age = 100),type="class")
predClass
runApp()
runApp()
runApp()
null
NULL
NULL+0
0
NULL+0
length(NULL)
length(NULL+0)
length(NULL+100)
if(NULL)
print("a")
is.null(NULL)
NULL
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rglwidgetOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?v
?textInput
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(plotly)
library(pca3d)
library(tree)
?plotOutput
runApp()
runApp()
runApp()
runApp()
?conditionalPanel
?column
runApp()
runApp()
runApp()
