"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
}
mat <- matrix(c(1:10),2)
df <- data.frame(v1 = c(1:10))
df2 <- data.frame(v1 = c(1:10), v2 = c(1:10))
getIQR(c(1:10))
x <- df
getIQR(mat)
getIQR(df)
x <-
switch(class(x),
"data.frame" = ifelse(dim(x)[2] == 1, x[[1]], stop("Not One Column")),
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
x
x <- df
x[[1]]
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1) x[[1]]; else stop("Not One Column")),
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
}
mat <- matrix(c(1:10),2)
df <- data.frame(v1 = c(1:10))
df2 <- data.frame(v1 = c(1:10), v2 = c(1:10))
getIQR(c(1:10))
x <- df
getIQR(mat)
getIQR(df)
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
return(x)
}
getIQR(df)
getIQR(df2)
getIQR(mat)
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = ifelse(dim(x)[2] == 1, x[[1]], stop("Not One Column")),
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
return(x)
}
getIQR(df)
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
}
getIQR(df)
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
return(quantile(x, probs = .75, ...))
quantile(x, probs = .75, ...) - quantile(x, probs = .75, ...)
}
getIQR(df)
getIQR <- function(x,...){
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = x,
"integer" = x,
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
getIQR(mat)
getIQR(df)
getIQR(df2)
getIQR(c(1:10))
v2 <- 1
getIQR(v2)
length(mat)
length(df)
length(df2)
dim(df)
dim(v)
dim(v2)
getIQR <- function(x,...){
length(x)
x <-
switch(class(x),
"data.frame" = if(dim(x)[2] == 1){x[[1]]}else{stop("Not One Column")},
"numeric" = if(length(x) > 1){x}else{stop("Not a Vector")},
"integer" = if(length(x) > 1){x}else{stop("Not a Vector")},
stop("Wrong Type")
)
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
mat <- matrix(c(1:10),2)
df <- data.frame(v1 = c(1:10))
df2 <- data.frame(v1 = c(1:10), v2 = c(1:10))
v <- c(1:10)
v2 <- 1
getIQR(c(1:10))
getIQR(mat)
NULL&T
getIQR(v2)
cha <- c("1","2")
getIQR(cha)
is.data.frame(v2)
is.numeric(df)
df
is.vector(df)
is.vector(cha)
getIQR <- function(data, ...){
if(is.data.frame(data)){
print("df")
}else if(is.vector(data) & is.numeric(data)){
print("vec")
}else stop("Wrong Type")
}
getIQR(c(1:10))
getIQR(mat)
getIQR(df)
getIQR(df2)
getIQR(v2)
getIQR(cha)
else if
ifelse()
if(1)
print(1)
getIQR <- function(data, ...){
x <-
if(is.data.frame(data)){
if(ncol(data) == 1){
x[[1]]
}else stop("Not One Column")
}else if(is.vector(data) & is.numeric(data)){
x
}else stop("Wrong Type")
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
mat <- matrix(c(1:10),2)
df <- data.frame(v1 = c(1:10))
df2 <- data.frame(v1 = c(1:10), v2 = c(1:10))
getIQR(c(1:10))
getIQR(mat)
getIQR(df)
getIQR(df2)
getIQR(v2)
getIQR <- function(data, ...){
x <-
if(is.data.frame(data)){
if(ncol(data) == 1){
x[[1]]
}else stop("Not One Column")
}else if(is.vector(data) & is.numeric(data)){
x
}else stop("Wrong Type")
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
df <- data.frame(v1 = c(1:10))
getIQR(df)
getIQR(df2)
getIQR(v2)
is.vector(v2)
is.numeric(v2)
getIQR <- function(data, ...){
x <-
if(is.data.frame(data)){
if(ncol(data) == 1){
x[[1]]
}else stop("Not One Column")
}else if(is.vector(data) & is.numeric(data)){
x
}else stop("Wrong Type")
return(x)
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
getIQR(v2)
getIQR <- function(data, ...){
x <-
if(is.data.frame(data)){
if(ncol(data) == 1){
x[[1]]
}else stop("Not One Column")
}else if(is.vector(data) & is.numeric(data)){
x
}else stop("Wrong Type")
quantile(x, probs = .75, ...) - quantile(x, probs = .25, ...)
}
getIQR(v2)
is.vector(v2)
v2
is.vector(1)
IQR(1)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
devtools::install_github("r-dbi/bigrquery")
library(bigrquery)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
devtools::install_github("r-dbi/bigrquery")
install.packages("bigrquery", type = "source")
library(bigrquery)
library(DBI)
con <- dbConnect(bigrquery::bigquery(), project = "publicdata", dataset = "samples", billing = "truist-sas")
!require(bigrquery)
dbListTables(con)
dbListTables(con)
dbListTables(con)
dbListTables(con)
dbListTables(con)
con <- dbConnect(bigrquery::bigquery(), project = "publicdata", dataset = "samples", billing = "truist-sas")
```{r}
dbListTables(con)
if(!require(RSQLite)) install.packages("RSQLite")
if(!require(RSQLite)) install.packages("RSQLite")
library(DBI)
library(RSQLite)
library(tidyverse)
library(tidyverse)
db <- dbConnect(RSQLite::SQLite(), "~/chinook.db")
dbListTables(db)
db <- dbConnect(RSQLite::SQLite(), "C:/Users/jonas/Desktop/chinook.db")
dbListTables(db)
library(GGally)
library(haven)
data_cur <- read_sas(paste0(file_path, "cur.sas7bdat", sep = ""))
file_path <- "D:/SASUniversityEdition/myfolders/GitHub/Truist-Credit_Risk_SAS/PD Model/Data/"
data_cur <- read_sas(paste0(file_path, "cur.sas7bdat", sep = ""))
str(data_cur)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
str(iris)
colname(data_cur)
colnames(data_cur)
data_cur <- data_cur %>%
select(Oltv, Dti, Cscore_b, Loan_age, Next_stat) #%>%
library(tidyverse)
data_cur <- data_cur %>%
select(Oltv, Dti, Cscore_b, Loan_age, Next_stat)
data_cur
library(tidyverse)
library(haven)
library(GGally)
as.factor(data_cur$Next_stat)
data_cur <- data_cur %>%
select(Oltv, Dti, Cscore_b, Loan_age, as.factor(Next_stat))
data_cur$Next_stat <- as.factor(data_cur$Next_stat)
file_path <- "D:/SASUniversityEdition/myfolders/GitHub/Truist-Credit_Risk_SAS/PD Model/Data/"
data_cur <- read_sas(paste0(file_path, "cur.sas7bdat", sep = ""))
data_cur <- data_cur %>%
select(Oltv, Dti, Cscore_b, Loan_age, Next_stat)
data_cur$Next_stat <- as.factor(data_cur$Next_stat)
data_cur %>%
ggpairs(aes(colours = Next_stat, alpha = 0.4))
file_path <- "D:/SASUniversityEdition/myfolders/GitHub/Truist-Credit_Risk_SAS/PD Model/Data/"
data_cur <- read_sas(paste0(file_path, "del.sas7bdat", sep = ""))
data_cur <- data_cur %>%
select(Oltv, Dti, Cscore_b, Loan_age, Next_stat)
data_cur$Next_stat <- as.factor(data_cur$Next_stat)
data_cur %>%
ggpairs(aes(colours = Next_stat, alpha = 0.4))
level(data_cur$Next_stat)
s
levels(data_cur$Next_stat)
library(tidyverse)
library(TD)
library(DT)
library(ggplot2)
p_crabs <- "C:/Users/jonas/Desktop/HW7/crabs.txt"
d_crabs <- read_delim(p_crabs, " ")
d_crabs
as.factor(d_crabs$color)
test <- as.factor(d_crabs$color)
level(test)
levels(test)
levels(test) <- c("light",  "medium", "dark", "darker")
levels(test)
levels(test)[1:10]
as.factor(d_crabs$color)[1:10]
d_crabs$color <- as.factor(d_crabs$color)
levels(d_crabs$color) <- c("light",  "medium", "dark", "darker")
d_crabs
d_crabs$y <- as.factor(d_crabs$y)
levels(d_crabs$y)
p_crabs <- "C:/Users/jonas/Desktop/HW7/crabs.txt"
d_crabs <- read_delim(p_crabs, " ")
d_crabs$color <- as.factor(d_crabs$color)
levels(d_crabs$color) <- c("light",  "medium", "dark", "darker")
d_crabs$spine <- as.factor(d_crabs$spine)
levels(d_crabs$spine) <- c("both good",  "one worn or broken", "both worn or broken")
d_crabs$y <- as.factor(d_crabs$y)
levels(d_crabs$y) <- c("No Satellite",  "At least 1 Sattelite")
d_crabs
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(DT)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species, group = Species)) +
geom_smooth(color = "green")
setwd("~/GitHub/R-Studio")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
url_base <- "https://records.nhl.com/site/api/"
url_type <- "franchise"
url_full <- paste0(url_base, url_type)
GET(url_full)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(jsonlite)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_type <- "/franchise-goalie-records?cayenneExp=franchiseId=ID"
url_full <- paste0(url_base, url_type)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_type <- "/franchise-team-totals"
url_full <- paste0(url_base, url_type)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_full
url_type <- "franchise-team-totals"
url_full <- paste0(url_base, url_type)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_type <- "franchise-goalie-records?cayenneExp=franchiseId=ID"
url_full <- paste0(url_base, url_type)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_type <- "franchise-goalie-records?cayenneExp=franchiseId=1"
url_full <- paste0(url_base, url_type)
url_full %>% GET() %>% content(type = "text") %>% fromJSON()
url_get <- function(url_call){
url_base <- "https://records.nhl.com/site/api/"
url_full <- paste0(url_base, url_call)
table <-
url_full %>%
GET() %>%
content(type = "text") %>% fromJSON()
return(table)
}
url_type <- "franchise"
fran <- url_get(url_type)
fran
url_type <- "franchise-skater-records?cayenneExp=franchiseId=ID"
fran <- url_get(url_type)
fran
url_get <- function(url_call){
url_base <- "https://records.nhl.com/site/api/"
url_full <- paste0(url_base, url_call)
table <-
url_full %>%
GET() %>%
content(type = "text")%>%
fromJSON()
return(table)
}
url_type <- "franchise-team-totals"
fran <- url_get(url_type)
fran
url_end <- "franchise"
fran <- url_get(url_end)
fran
url_get <- function(url_call){
url_base <- "https://records.nhl.com/site/api/"
url_full <- paste0(url_base, url_call)
table <-
url_full %>%
GET() %>%
content(type = "text")%>%
fromJSON()
return(table)
}
reco_get <- function(ID){
season_end <- paste0("franchise-season-records?cayenneExp=franchiseId=", ID)
goalie_end <- paste0("franchise-goalie-records?cayenneExp=franchiseId=", ID)
skater_end <- paste0("franchise-skater-records?cayenneExp=franchiseId=", ID)
return(list(season = url_get(season_end),
goalie = url_get(goalie_end),
skater = url_get(skater_end))
)
}
url_end <- "franchise"
fran <- url_get(url_end)
url_end <- "franchise-team-totals"
fran_total <- url_get(url_end)
fran_1 <- reco_get("1")
fran_1
fran_1$goalie
fran
fran_1$goalie
url_end <- "franchise"
fran <- url_get(url_end)
fran
fran_1 <- reco_get("1")
fran_1$skater
fran
fran
fran_total
fran
fran_total
fran
fran$id
fran[1]
fran$data$id
fran_total$data$franchiseId
fran$data$firstSeasonId
fran_total$data$firstSeasonId
test <- fran_total$data$franchiseId
tmp <- fran$data$id
tmp
test
order(test)
desc(test)
test[order(test)]
test
fran$data
tmp <- fran$data %>% select(id, firstSeasonId)
tmp
test$id <- fran_total$data$franchiseId
inner_join(tmp, test, by = id)
test <- fran_total$data$franchiseId
test
tmp <- fran$data %>% select(id, firstSeasonId)
tmp1 <- fran_total$data$franchiseId
test <- data.frame(id = tmp1)
inner_join(tmp, test, by = id)
test
str(test)
str(tmp)
inner_join(tmp, test, by = id)
inner_join(tmp, test, by = "id")
tmp2 <- inner_join(tmp, test, by = "id")
fran_total$data$id
fran_total$data$franchiseId
fran_total$data$firstSeasonId[order(franchiseId)]
fran_total$data$firstSeasonId[order(~franchiseId)]
fran_total$data$firstSeasonId[order(fran_total$data$franchiseId)]
tmp2 <- inner_join(tmp, test, by = "id")[2]
tmp2 <- inner_join(tmp, test, by = "id")
tmp2
tmp2[2,1:10]
tmp2[1:10,2]
fran_total$data$firstSeasonId[order(fran_total$data$franchiseId)][1:10]
head(fran)
head(fran_total)
url_get <- function(url_call){
url_base <- "https://records.nhl.com/site/api/"
url_full <- paste0(url_base, url_call)
table <-
url_full %>%
GET() %>%
content(type = "text")%>%
fromJSON()
return(table$data)
}
reco_get <- function(ID){
season_end <- paste0("franchise-season-records?cayenneExp=franchiseId=", ID)
goalie_end <- paste0("franchise-goalie-records?cayenneExp=franchiseId=", ID)
skater_end <- paste0("franchise-skater-records?cayenneExp=franchiseId=", ID)
return(list(season = url_get(season_end),
goalie = url_get(goalie_end),
skater = url_get(skater_end))
)
}
url_end <- "franchise"
fran <- url_get(url_end)
url_end <- "franchise-team-totals"
fran_total <- url_get(url_end)
fran_1 <- reco_get("1")
fran_1$skater
fran_1$goalie
head(fran)
head(fran_total)
fran
head(fran_total)
fran
head(fran_total)
select(fran_total, "teamId")
select(fran_total, c("teamId", "teamName")
select(fran_total, c("teamId", "teamName"))
fran_total
fran_total %>%
select("teamId", "teamName")
fran
fran_1$season
fran_1$skater
